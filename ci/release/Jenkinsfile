def getBranchNameForVersion(String version) {
    def ver = version.split('\\.')
    return 'release/' + ver[0] + "." + ver[1]
}

pipeline {
    agent {
        kubernetes {
            yamlFile 'ci/release/kubernetes.yaml'
        }
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }

    parameters {
        string description: 'Release Version. Format: <major>.<minor>.<patch>', name: 'ReleaseVersion', trim: true
    }


    stages {
        stage ('Build Release (model)') {
            steps {
                container('github') {
                    withCredentials([string(credentialsId: 'github-bot-token', variable: 'GITHUB_TOKEN')]) {
                        ghCreateTagAndBuild repo: 'eclipse-set/model', ref: getBranchNameForVersion(params.ReleaseVersion), version: params.ReleaseVersion
                    }
                }
            }
        }
        stage ('Build Release (browser)') {
            steps {
                container('github') {
                    withCredentials([string(credentialsId: 'github-bot-token', variable: 'GITHUB_TOKEN')]) {
                        ghCreateTagAndBuild repo: 'eclipse-set/browser', ref: getBranchNameForVersion(params.ReleaseVersion), version: params.ReleaseVersion
                    }
                }
            }
        }
        stage ('Build Release (set)') {
            steps {
                container('github') {
                    withCredentials([string(credentialsId: 'github-bot-token', variable: 'GITHUB_TOKEN')]) {
                        ghCreateTagAndBuild repo: 'eclipse-set/set', ref: getBranchNameForVersion(params.ReleaseVersion), version: params.ReleaseVersion
                    }
                }
            }
        }
    }
}
